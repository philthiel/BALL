//_new_file_header


#ifndef BALL_CORE_STRUCTURE_BONDORDERS_BONDORDERASSIGNMENT_H
#define BALL_CORE_STRUCTURE_BONDORDERS_BONDORDERASSIGNMENT_H

#include <BALL/core/common/global.h>
#include <BALL/core/datatype/hashMap.h>
#include <BALL/core/structure/bondorders/partialBondOrderAssignment.h>

#include <vector>


namespace BALL
{
	class AssignBondOrderProcessor;
	class AtomContainer;
	class Atom;
	class Bond;

	/** \brief A solution to the bond order assignment problem.
	 *  
	 *  This class represents a full bond order assignment as it
	 *  is generated by the \link AssignBondOrderProcessor AssignBondOrderProcessor \endlink
	 *  through a \link BondOrderAssignmentStrategy BondOrderAssignmentStrategy \endlink.
	 * 
	 */
	class BALL_EXPORT BondOrderAssignment
		: public PartialBondOrderAssignment
	{
		friend class AssignBondOrderProcessor;

		public:
			// Default constructor
			BondOrderAssignment(AssignBondOrderProcessor* abop);

			// Destructor
			virtual ~BondOrderAssignment();

			// 
			void clear();

			/// Apply the solution to the AtomContainer
			bool apply();

			// 
			int getNumberOfNodeExpansions() const {return node_expansions;}

			//
			int getQueueSize() const {return queue_size;}

			// denotes whether the problem could be solved or not  
			bool valid;

			// the result : the set of bond orders for _ALL_ original bonds
			HashMap<Bond*, int> bond_order_map;

			// the result part2: the atoms with n additional hydrogens
			HashMap<Atom*, int> number_of_virtual_hydrogens;

			// the virtual atoms and bonds that should be deleted when the next 
			// solution is applied
			std::vector<Atom*> atoms_to_delete;
			//std::vector<Bond*> bonds_to_delete;

			float total_charge;
			int node_expansions;
			int queue_size;

			AtomContainer* ac;
	};
}

#endif // BALL_CORE_STRUCTURE_BONDORDERS_BONDORDERASSIGNMENT_H

